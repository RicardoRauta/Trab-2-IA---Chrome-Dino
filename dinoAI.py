from math import exp, tanh
from unittest import result
import pygame
import os
import random
import time
from sys import exit
import matplotlib.pyplot as plt

pygame.init()

# Valid values: HUMAN_MODE or AI_MODE
GAME_MODE = "AI_MODE"
GRAPH = False

# Global Constants
SCREEN_HEIGHT = 600
SCREEN_WIDTH = 1100
if GRAPH:
    SCREEN = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))

RUNNING = [pygame.image.load(os.path.join("Assets/Dino", "DinoRun1.png")),
           pygame.image.load(os.path.join("Assets/Dino", "DinoRun2.png"))]
JUMPING = pygame.image.load(os.path.join("Assets/Dino", "DinoJump.png"))
DUCKING = [pygame.image.load(os.path.join("Assets/Dino", "DinoDuck1.png")),
           pygame.image.load(os.path.join("Assets/Dino", "DinoDuck2.png"))]

SMALL_CACTUS = [pygame.image.load(os.path.join("Assets/Cactus", "SmallCactus1.png")),
                pygame.image.load(os.path.join("Assets/Cactus", "SmallCactus2.png")),
                pygame.image.load(os.path.join("Assets/Cactus", "SmallCactus3.png"))]
LARGE_CACTUS = [pygame.image.load(os.path.join("Assets/Cactus", "LargeCactus1.png")),
                pygame.image.load(os.path.join("Assets/Cactus", "LargeCactus2.png")),
                pygame.image.load(os.path.join("Assets/Cactus", "LargeCactus3.png")),
                pygame.image.load(os.path.join("Assets/Cactus", "LargeCactus4.png"))]

BIRD = [pygame.image.load(os.path.join("Assets/Bird", "Bird1.png")),
        pygame.image.load(os.path.join("Assets/Bird", "Bird2.png"))]

CLOUD = pygame.image.load(os.path.join("Assets/Other", "Cloud.png"))

BG = pygame.image.load(os.path.join("Assets/Other", "Track.png"))


class Dinosaur:
    X_POS = 90
    Y_POS = 330
    Y_POS_DUCK = 355
    JUMP_VEL = 17
    JUMP_GRAV = 1.1

    def __init__(self):
        self.duck_img = DUCKING
        self.run_img = RUNNING
        self.jump_img = JUMPING

        self.dino_duck = False
        self.dino_run = True
        self.dino_jump = False

        self.step_index = 0
        self.jump_vel = 0
        self.jump_grav = self.JUMP_VEL
        self.image = self.run_img[0]
        self.dino_rect = self.image.get_rect()
        self.dino_rect.x = self.X_POS
        self.dino_rect.y = self.Y_POS

    def update(self, userInput):
        if self.dino_duck and not self.dino_jump:
            self.duck()
        if self.dino_run:
            self.run()
        if self.dino_jump:
            self.jump()

        if self.step_index >= 20:
            self.step_index = 0

        if userInput == "K_UP" and not self.dino_jump:
            self.dino_duck = False
            self.dino_run = False
            self.dino_jump = True
        elif userInput == "K_DOWN" and not self.dino_jump:
            self.dino_duck = True
            self.dino_run = False
            self.dino_jump = False
        elif userInput == "K_DOWN":
            self.dino_duck = True
            self.dino_run = False
            self.dino_jump = True
        elif not (self.dino_jump or userInput == "K_DOWN"):
            self.dino_duck = False
            self.dino_run = True
            self.dino_jump = False

    def duck(self):
        self.image = self.duck_img[self.step_index // 10]
        self.dino_rect = self.image.get_rect()
        self.dino_rect.x = self.X_POS
        self.dino_rect.y = self.Y_POS_DUCK
        self.step_index += 1

    def run(self):
        self.image = self.run_img[self.step_index // 10]
        self.dino_rect = self.image.get_rect()
        self.dino_rect.x = self.X_POS
        self.dino_rect.y = self.Y_POS
        self.step_index += 1

    def jump(self):
        self.image = self.jump_img
        if self.dino_duck:
            self.jump_grav = self.JUMP_GRAV * 4
        if self.dino_jump:
            self.dino_rect.y -= self.jump_vel
            self.jump_vel -= self.jump_grav
        if self.dino_rect.y > self.Y_POS + 10:
            self.dino_jump = False
            self.jump_vel = self.JUMP_VEL
            self.jump_grav = self.JUMP_GRAV
            self.dino_rect.y = self.Y_POS

    def draw(self, SCREEN):
        SCREEN.blit(self.image, (self.dino_rect.x, self.dino_rect.y))

    def getXY(self):
        return (self.dino_rect.x, self.dino_rect.y)


class Cloud:
    def __init__(self):
        self.x = SCREEN_WIDTH + random.randint(800, 1000)
        self.y = random.randint(50, 100)
        self.image = CLOUD
        self.width = self.image.get_width()

    def update(self):
        self.x -= game_speed
        if self.x < -self.width:
            self.x = SCREEN_WIDTH + random.randint(2500, 3000)
            self.y = random.randint(50, 100)

    def draw(self, SCREEN):
        SCREEN.blit(self.image, (self.x, self.y))


class Obstacle():
    def __init__(self, image, type):
        super().__init__()
        self.image = image
        self.type = type
        self.rect = self.image[self.type].get_rect()

        self.rect.x = SCREEN_WIDTH

    def update(self):
        self.rect.x -= game_speed
        if self.rect.x < - self.rect.width:
            obstacles.pop(0)

    def draw(self, SCREEN):
        SCREEN.blit(self.image[self.type], self.rect)

    def getXY(self):
        return (self.rect.x, self.rect.y)

    def getHeight(self):
        return y_pos_bg - self.rect.y

    def getType(self):
        return (self.type)


class SmallCactus(Obstacle):
    def __init__(self, image):
        self.type = random.randint(0, 2)
        super().__init__(image, self.type)
        self.rect.y = 345


class LargeCactus(Obstacle):
    def __init__(self, image):
        self.type = random.randint(0, 2)
        super().__init__(image, self.type)
        self.rect.y = 325


class Bird(Obstacle):
    def __init__(self, image):
        self.type = 0
        super().__init__(image, self.type)

        # High, middle or ground
        if random.randint(0, 3) == 0:
            self.rect.y = 345
        elif random.randint(0, 2) == 0:
            self.rect.y = 260
        else:
            self.rect.y = 300
        self.index = 0

    def draw(self, SCREEN):
        if self.index >= 19:
            self.index = 0
        SCREEN.blit(self.image[self.index // 10], self.rect)
        self.index += 1


class KeyClassifier:
    def __init__(self, state):
        pass

    def keySelector(self, distance, obHeight, speed, obType):
        pass

    def updateState(self, state):
        pass

def sigmoid(x):
    if x >= 0:
        z = exp(-x)
        sig = 1 / (1 + z)
        return sig
    else:
        z = exp(x)
        sig = z / (1 + z)
        return sig
def degrau(x):
    if x > 0:
        return 1
    return 0

weightQtd = 60

class KeyRicClassifier(KeyClassifier):
    def __init__(self, weight):
        self.weight = weight

    def keySelector(self, obDistance, obHeight, scSpeed, obWidth, diHeight, obDistance2, obHeight2, obWidth2):
        
        op = self.neuronsOp([obDistance, obHeight, obWidth, scSpeed, diHeight], [5, 5, 2], [sigmoid, degrau]) # Total = 60
        
        if op[0] == 1:
            return "K_UP"
        elif op[1] == 1:
            return "K_DOWN"
        return "K_NO"

    def neuronsOp(self, value, neurons, func_list):
        newNeurons = value.copy()
        prevNeurons = []
        position = 0
        for n in range(len(neurons)):
            if n == 0:
                continue
            func = func_list[n-1]
            prevNeurons = newNeurons.copy()
            newNeurons.clear()
            for it in range(neurons[n]):
                sum = 0
                for it2 in range(neurons[n-1]):
                    sum += prevNeurons[it2] * self.weight[position]
                    position += 1
                newNeurons.append(func(sum))
        return newNeurons

    def updateWeight(self, weight):
        self.weight = weight


def playerKeySelector():
    userInputArray = pygame.key.get_pressed()

    if userInputArray[pygame.K_UP]:
        return "K_UP"
    elif userInputArray[pygame.K_DOWN]:
        return "K_DOWN"
    else:
        return "K_NO"


def playGame():
    global game_speed, x_pos_bg, y_pos_bg, points, obstacles
    run = True
    clock = pygame.time.Clock()
    player = Dinosaur()
    cloud = Cloud()
    game_speed = 10
    x_pos_bg = 0
    y_pos_bg = 383
    points = 0
    font = pygame.font.Font('freesansbold.ttf', 20)
    obstacles = []
    death_count = 0
    spawn_dist = 0

    def score():
        global points, game_speed
        points += 0.25
        if points % 100 == 0:
            game_speed += 1

        if GRAPH:
            text = font.render("Points: " + str(int(points)), True, (0, 0, 0))
            textRect = text.get_rect()
            textRect.center = (1000, 40)
            SCREEN.blit(text, textRect)

    def background():
        global x_pos_bg, y_pos_bg
        image_width = BG.get_width()
        SCREEN.blit(BG, (x_pos_bg, y_pos_bg))
        SCREEN.blit(BG, (image_width + x_pos_bg, y_pos_bg))
        if x_pos_bg <= -image_width:
            SCREEN.blit(BG, (image_width + x_pos_bg, y_pos_bg))
            x_pos_bg = 0
        x_pos_bg -= game_speed

    while run:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                exit()

        if GRAPH:
            SCREEN.fill((255, 255, 255))

        obDistance = 1500
        obHeight = 0
        obType = 2
        obWidth = 0
        obDistance2 = 0
        obHeight2 = 0
        obWidth2 = 0
        if len(obstacles) != 0:
            xy = obstacles[0].getXY()
            obDistance = xy[0]
            obHeight = obstacles[0].getHeight()
            obType = obstacles[0]
            obWidth = obstacles[0].rect.width
        if len(obstacles) > 1:
            xy2 = obstacles[1].getXY()
            obDistance2 = xy2[0]
            obHeight2 = obstacles[1].getHeight()
            obWidth2 = obstacles[1].rect.width

        if GAME_MODE == "HUMAN_MODE":
            userInput = playerKeySelector()
        else:
            userInput = aiPlayer.keySelector(obDistance, obHeight, game_speed, obWidth, player.getXY()[1], obDistance2, obHeight2, obWidth2)

        if len(obstacles) == 0 or obstacles[-1].getXY()[0] < spawn_dist:
            spawn_dist = random.randint(0, 670)
            onlyBird = False
            if onlyBird:
                obstacles.append(Bird(BIRD))
            elif random.randint(0, 2) == 0:
                obstacles.append(SmallCactus(SMALL_CACTUS))
            elif random.randint(0, 2) == 1:
                obstacles.append(LargeCactus(LARGE_CACTUS))
            elif random.randint(0, 5) == 5:
                obstacles.append(Bird(BIRD))

        player.update(userInput)
        if GRAPH:
            player.draw(SCREEN)

        for obstacle in list(obstacles):
            obstacle.update()
            if GRAPH:
                obstacle.draw(SCREEN)

        if GRAPH:
            background()

            cloud.draw(SCREEN)
        cloud.update()

        score()

        if GRAPH:
            clock.tick(60)#60
        if GRAPH:
            pygame.display.update()

        for obstacle in obstacles:
            if player.dino_rect.colliderect(obstacle.rect):
                if GRAPH:
                    pygame.time.delay(2000)#2000
                death_count += 1
                return points

# Genetic

def generate_childs(weight_list, crossoverQtd, bestValue, mutationRate):
    auxCrossover = []
    listSize = len(weight_list)
    for it in range(listSize):
        weight1 = weight_list[it][1]
        auxCrossover.append(weight1)
        for it2 in range(listSize):
            if it == it2:
                continue
            weight2 = weight_list[it2][1]
            newMutationRate = 0.2*(1 - (weight_list[it][0] + weight_list[it2][0])/(2*bestValue)) + 0.01 * mutationRate
            auxCrossover += crossover(weight1, weight2, crossoverQtd, newMutationRate)
    return auxCrossover
    

# Mutation

def mutation(state, mutationRate):
    aux = state.copy()
    state_size = len(state)
    for it in range(state_size):
        if random.random() < mutationRate:
            aux[it] +=  random.randint(-50,50)
            if aux[it] < -1000:
                aux[it] = -1000
            if aux[it] > 1000:
                aux[it] = 1000
    return aux
        
# Crossover

def crossover(state1, state2, childrensQtd, mutationRate):
    childrens = []
    for it in range(childrensQtd):
        randPos = random.randint(0, len(state1))
        newState = state1[:randPos] + state2[randPos:]
        childrens.append(mutation(newState, mutationRate))
    return childrens

def run(max_time, initial_value):
    global aiPlayer

    #### Inicializar arquivo de log vazio
    f = open("log.txt", "w")
    f.write("")
    f.close()
    ####

    #### Inicializar tabela de valores
    f = open("table.csv", "w")
    f.write("Gen;Time;Best Score;First Place Generation;Second Place Generation;Third Place Generation\n")
    f.close()
    ####

    plays = 3
    start = time.time()
    weights = []
    end = 0
    generation = 1
    best_value = 0
    
    #### Testar 30 listas de pesos aleatórias
    initial_size = 30
    values_list = []
    count = 0
    for it in range(initial_size):
            values_list .append([random.randint(-1000,1000) for col in range(weightQtd)])
    for newWeights in values_list:
        count += 1
        aiPlayer = KeyRicClassifier(newWeights)
        _, value = manyPlaysResults(plays)
        if value > best_value:
            best_value = value
            best_state = newWeights
        #print(generation, count, value)
        weights.append([value, newWeights])
    weights.sort(reverse=True)
    saveWeights(weights, generation, time.time() - start)
    saveCSV(weights, generation, time.time() - start, best_value)
    ####

    #### Aplicar metaheuristica em busca de encontrar melhores pesos 
    generation+=1
    mutationRate = 0
    while end - start <= max_time:
        count = 0
        
        newWeights = generate_childs(weights[0 : 5], 3, best_value, mutationRate)
        weights.clear()

        for s in newWeights:
            count += 1
            aiPlayer = KeyRicClassifier(s)
            _, value = manyPlaysResults(plays)
            if value > best_value:
                best_value = value
                best_state = s
            weights.append([value, s])
        end = time.time()
        weights.sort(reverse=True)

        if weights[0][0] >= best_value:
            mutationRate = 0
        else:
            mutationRate += 1
        saveWeights(weights, generation, time.time() - start)
        saveCSV(weights, generation, time.time() - start, best_value)
        generation+=1
    ####
    
    return best_state, best_value

def saveWeights(weights, gen, time):
    f = open("log.txt", "a")
    f.write("Generation: " + str(gen) + "\n")
    f.write("Time: " + str(time) + "\n\n")
    it = 0
    for weight in weights:
        it+=1
        f.write(str(weight) + "\n")
        if it == 10:
            break
    f.write("\n\n\n")
    f.close()

def saveCSV(weights, gen, time, best_score):
    f = open("table.csv", "a")
    f.write(str(gen) + ";" + str(time) + ';' + str(best_score) + ';' + str(weights[0][0]) + ';' + str(weights[1][0]) + ';' + str(weights[2][0]) + "\n")
    f.close()

from scipy import stats
import numpy as np


def manyPlaysResults(rounds):
    results = []
    for round in range(rounds):
        results += [playGame()]
    npResults = np.asarray(results)
    return (results, npResults.mean() - npResults.std())


def main():
    global aiPlayer
    initial_state = []
    best_state, best_value = run(24*60*60, initial_state) # rodar por 24 horas
    aiPlayer = KeyRicClassifier(best_state)
    res, value = manyPlaysResults(30)
    npRes = np.asarray(res)
    print(res, npRes.mean(), npRes.std(), value)
    f = open("log.txt", "a")
    f.write("Result: \n" + str(res) + "\nMean: " + str(npRes.mean()) + "\nStd: " + str(npRes.std()) + "\nValue: " + str(value))

def testValue():
    global aiPlayer
    test_state = [0.07, -0.5899999999999999, 0.44, 0.2900000000000001, 0.030000000000000054, -0.48, -0.63, -0.19999999999999993, -0.72, -0.62, 0.6, -0.06000000000000011, 0.32000000000000006, 0.9700000000000001, 0.04000000000000009, -0.30000000000000004, -0.03999999999999998, -0.78, -0.6599999999999998, 0.92, 0.6900000000000001, -0.33999999999999986, 0.11000000000000001, -0.6699999999999999, -0.51, 0.1, 0.06999999999999995, 0.06000000000000001, 0.36000000000000004, -0.6399999999999999, 0.37999999999999995, 0.21000000000000005, 0.04000000000000001, 0.13999999999999999, -0.5900000000000001, 0.33, 0.5199999999999999, -0.6300000000000001, 0.2399999999999999, 0.8400000000000001, -0.45999999999999996, -0.8899999999999999, -0.41, 0.06999999999999995, 0.38, 0.43000000000000005, -0.73, 0.06999999999999995, 0.14, 1.0, 0.19, -0.86, -0.19999999999999996, 0.75, -0.23000000000000004, -0.21000000000000013, -0.9700000000000001, 0.5299999999999998, -0.44999999999999996, -0.21999999999999978, -0.25999999999999995, -0.30999999999999983, 0.44000000000000017, -0.43000000000000005, 0.35999999999999993, -0.72, 0.86, 0.9500000000000002, 0.42, 0.47000000000000003, -0.23000000000000012, -0.57, 0.23999999999999994, -0.10999999999999988, -0.4999999999999999, -0.33000000000000007, 0.05, 0.20999999999999996]
    aiPlayer = KeyRicClassifier(test_state)
    res, value = manyPlaysResults(30)
    npRes = np.asarray(res)
    print(res, npRes.mean(), npRes.std(), value)

main()
#testValue()

# [8, 10, 2]
# Generation: 994
# Time: 6367.31636428833
#
# [807.2563727537859, [0.8399999999999999, -1.0, 0.029999999999999777, -0.28000000000000025, -0.43, 0.030000000000000044, -0.07999999999999996, -0.33999999999999986, 0.89, 0.08000000000000013, 0.68, -0.19999999999999968, -0.99, 0.010000000000000115, -0.13999999999999987, -0.18999999999999995, 0.1499999999999999, -0.5299999999999997, 0.8700000000000002, -0.8299999999999997, 0.050000000000000044, 0.69, 0.19999999999999973, -0.31999999999999995, -0.18000000000000033, 0.13999999999999999, 0.5199999999999998, -0.54, -0.22999999999999957, -0.4199999999999997, -0.09999999999999964, 0.3099999999999999, 0.6999999999999995, 0.4800000000000001, -0.05999999999999994, -0.2699999999999998, 0.31999999999999984, 0.6699999999999998, -0.43000000000000016, 0.20000000000000007, -0.050000000000000155, 0.1699999999999996, -0.9899999999999999, 0.6599999999999997, 0.23999999999999982, 0.18999999999999995, 0.13, -0.09000000000000022, 0.29000000000000015, 0.5700000000000001, -0.029999999999999583, -0.6100000000000001, 0.39, 0.9600000000000003, 0.11000000000000015, -0.8, -0.6099999999999997, -0.0999999999999999, 0.01999999999999963, 0.6100000000000001, -0.6400000000000005, -0.17000000000000015, -0.07000000000000028, 0.38, -0.6900000000000002, 0.020000000000000018, -0.7199999999999998, -0.3800000000000001, -0.43000000000000016, -0.3600000000000004, -0.4100000000000001, -0.4000000000000001, 0.5999999999999999, -0.06999999999999995, -0.7200000000000002, -0.07999999999999974, 0.2299999999999996, -0.3499999999999998, -0.6300000000000001, 0.12000000000000005, 0.8999999999999998, -0.81, 0.19000000000000017, 0.5499999999999996, 0.3699999999999999, 0.21999999999999972, -0.08000000000000003, -0.15999999999999964, -0.6299999999999994, 0.5700000000000002, -0.8200000000000001, -0.7099999999999997, -1.6653345369377348e-16, 0.22999999999999976, -0.15999999999999992, -0.1900000000000002, 0.6900000000000002, -0.4399999999999996, 0.9400000000000004, -0.4999999999999999]]
# [740.1764267015658, [0.8399999999999999, -1.0, 0.029999999999999777, -0.28000000000000025, -0.43, 0.030000000000000044, -0.07999999999999996, -0.33999999999999986, 0.89, 0.2600000000000001, 0.68, -0.19999999999999968, -0.99, 0.010000000000000115, -0.13999999999999987, 4.163336342344337e-17, 0.1499999999999999, -0.5299999999999997, 0.3200000000000003, -0.9299999999999997, 0.050000000000000044, 0.69, 0.19999999999999973, -0.06999999999999995, 0.019999999999999685, 0.029999999999999985, 0.5199999999999998, -0.36000000000000004, -0.22999999999999957, -0.7899999999999996, -0.1699999999999997, 0.3099999999999999, 0.11999999999999952, 0.6000000000000001, -0.17999999999999994, -0.2299999999999998, 0.31999999999999984, 0.6699999999999998, -0.43000000000000016, 0.11000000000000008, -0.46000000000000013, 0.1699999999999996, -0.9899999999999999, 0.6599999999999997, -0.6000000000000002, 0.42999999999999994, 0.42000000000000004, -0.6100000000000002, 0.6200000000000001, 0.18000000000000002, 4.440892098500626e-16, -0.6100000000000001, 0.3500000000000001, 0.4000000000000003, 0.11000000000000015, -0.41000000000000003, -0.029999999999999694, -0.8699999999999999, 0.16999999999999965, 0.7300000000000002, -0.6400000000000005, -0.5700000000000001, -0.9700000000000002, 0.38, -0.5700000000000001, 0.06, -0.8699999999999998, 0.44999999999999984, -0.9100000000000001, -0.4700000000000003, -0.5100000000000001, -0.5900000000000001, 0.16999999999999985, -0.6799999999999999, -0.27000000000000024, 0.24000000000000027, 0.3699999999999996, -0.6299999999999999, -0.24000000000000005, 0.4000000000000001, 0.8999999999999998, -0.81, 0.3200000000000002, 0.44999999999999957, 0.3699999999999999, 0.5799999999999997, -0.08000000000000003, -0.15999999999999964, -0.6299999999999994, 0.5700000000000002, -0.16999999999999993, -0.4699999999999998, -1.6653345369377348e-16, 0.13999999999999976, -0.15999999999999992, -0.6000000000000002, 0.6900000000000002, -0.4399999999999996, 0.9400000000000004, -0.4599999999999999]]
# [734.8326283161159, [0.8399999999999999, -1.0, 0.029999999999999777, -0.22000000000000028, -0.43, 0.030000000000000044, 0.14000000000000004, -0.33999999999999986, 0.89, 0.2600000000000001, 0.68, -0.18999999999999967, -0.99, 0.010000000000000115, -0.17999999999999988, 4.163336342344337e-17, 0.41999999999999993, -0.9699999999999998, 0.9600000000000002, -0.9299999999999997, 0.28, 0.69, 0.19999999999999973, -0.82, -0.5200000000000004, -0.13, 0.9099999999999998, -0.92, -0.8199999999999996, -0.6899999999999997, -0.7099999999999996, 0.3099999999999999, 0.6999999999999995, 0.4800000000000001, -0.17999999999999994, -0.2699999999999998, -0.17000000000000015, 0.6699999999999998, -0.43000000000000016, 0.11000000000000008, -0.46000000000000013, 0.1699999999999996, -0.9899999999999999, 0.6599999999999997, 0.23999999999999982, 0.18999999999999995, 0.13, -0.6500000000000002, 0.43000000000000016, 0.5700000000000001, -0.029999999999999583, -0.6100000000000001, 0.39, 0.5800000000000003, 0.11000000000000015, -0.8, -0.6099999999999997, -0.0999999999999999, 0.01999999999999963, 0.6100000000000001, -0.6400000000000005, 0.2999999999999998, -0.07000000000000028, 0.38, -0.6900000000000002, 0.020000000000000018, -0.7199999999999998, -0.3800000000000001, -0.43000000000000016, 0.06999999999999962, -0.0500000000000001, -0.4000000000000001, 0.5999999999999999, -0.06999999999999995, -0.8200000000000002, -0.07999999999999974, 0.2299999999999996, -0.3499999999999998, -0.6300000000000001, 0.12000000000000005, 0.8999999999999998, -0.7000000000000001, 0.19000000000000017, 0.7899999999999996, 0.3699999999999999, 0.21999999999999972, -0.08000000000000003, -0.15999999999999964, -0.6299999999999994, 0.5700000000000002, -0.8200000000000001, -0.4699999999999998, -1.6653345369377348e-16, 0.17999999999999977, -0.15999999999999992, -0.1900000000000002, 0.6900000000000002, -0.4399999999999996, 0.9400000000000004, -0.4999999999999999]]
# [734.7139819384936, [0.8399999999999999, -0.91, 0.029999999999999777, -0.22000000000000028, -0.43, 0.030000000000000044, 0.14000000000000004, -0.33999999999999986, 0.89, 0.2600000000000001, 0.68, -0.19999999999999968, -0.99, 0.010000000000000115, -0.17999999999999988, 4.163336342344337e-17, 0.41999999999999993, -0.5899999999999997, 0.9600000000000002, -0.1499999999999997, 0.050000000000000044, 0.69, 0.19999999999999973, -0.10000000000000009, -0.5200000000000004, -0.13, 0.7599999999999998, -0.54, -0.8199999999999996, -0.6899999999999997, -0.7099999999999996, 0.3099999999999999, 0.6999999999999995, 0.4800000000000001, -0.17999999999999994, -0.2699999999999998, 0.31999999999999984, 0.6699999999999998, -0.43000000000000016, 0.11000000000000008, -0.46000000000000013, 0.1699999999999996, -0.9899999999999999, 0.6599999999999997, -0.2200000000000002, 0.18999999999999995, 0.13, -0.2500000000000002, 0.43000000000000016, 0.5700000000000001, 0.11000000000000043, -0.4200000000000001, 0.39, 0.5800000000000003, 0.11000000000000015, -0.8, -0.6099999999999997, -0.0999999999999999, -0.5800000000000003, 0.6100000000000001, -0.6400000000000005, -0.17000000000000015, -0.07000000000000028, 0.38, -0.28000000000000014, 0.020000000000000018, -0.7199999999999998, -0.3800000000000001, -0.43000000000000016, -0.3600000000000004, -0.4100000000000001, -0.4000000000000001, 0.16999999999999985, -0.06999999999999995, -0.8200000000000002, -0.07999999999999974, 0.2299999999999996, -0.3499999999999998, -0.6300000000000001, 0.12000000000000005, 0.8999999999999998, -0.81, 0.3200000000000002, 0.7699999999999996, 0.3699999999999999, 0.21999999999999972, -0.08000000000000003, -0.29999999999999966, -0.6299999999999994, 0.5700000000000002, -0.8200000000000001, -0.4699999999999998, -0.010000000000000167, 0.22999999999999976, -0.15999999999999992, -0.1900000000000002, 0.10000000000000009, -0.4399999999999996, 0.9400000000000004, -0.5699999999999998]]
# [724.9455924967178, [0.8399999999999999, -1.0, 0.029999999999999777, -0.22000000000000028, -0.43, 0.030000000000000044, -0.07999999999999996, -0.33999999999999986, 0.89, 0.2600000000000001, 0.68, -0.19999999999999968, -0.99, 0.010000000000000115, -0.17999999999999988, 4.163336342344337e-17, 0.2899999999999999, 0.07000000000000028, 0.5400000000000003, -0.9299999999999997, 0.050000000000000044, 0.69, 0.19999999999999973, -0.82, -0.5200000000000004, -0.45999999999999996, 0.5199999999999998, -0.42000000000000004, -0.31999999999999956, -0.37999999999999967, -0.7099999999999996, 0.3099999999999999, 0.20999999999999952, 0.33000000000000007, -0.51, -0.2699999999999998, 0.5499999999999998, 0.04999999999999982, -0.43000000000000016, 0.22000000000000008, -0.46000000000000013, 0.1699999999999996, -0.9899999999999999, 0.6599999999999997, -0.2200000000000002, 0.52, 0.54, -0.6100000000000002, 0.22000000000000008, 2.7755575615628914e-17, 4.440892098500626e-16, -0.55, 0.1200000000000001, 0.4000000000000003, 0.07000000000000015, -0.41000000000000003, -0.029999999999999694, -0.04999999999999988, 0.16999999999999965, 0.27000000000000013, -0.6400000000000005, -0.28000000000000014, -0.15000000000000013, 0.38, -0.28000000000000014, 0.28, -0.3499999999999998, -0.4200000000000001, -0.43000000000000016, -0.29000000000000037, -1.1102230246251565e-16, -0.5900000000000001, 0.16999999999999985, -0.06999999999999995, -0.8200000000000002, -0.07999999999999974, 0.2299999999999996, -0.16999999999999982, -0.9700000000000001, 0.81, 0.8999999999999998, -0.81, 0.3200000000000002, 0.7699999999999996, 0.3699999999999999, 0.21999999999999972, -0.08000000000000003, -0.15999999999999964, -0.17999999999999944, 0.5700000000000002, -0.02999999999999997, -0.4699999999999998, -0.8100000000000002, -0.4800000000000002, -0.15999999999999992, -0.1900000000000002, 0.7000000000000002, -0.11999999999999961, 0.9400000000000004, -0.4999999999999999]]
# [718.2218768791976, [0.8399999999999999, -1.0, 0.029999999999999777, -0.22000000000000028, -0.43, 0.030000000000000044, -0.07999999999999996, -0.33999999999999986, 0.89, 0.2600000000000001, 0.79, -0.6299999999999997, -0.99, 0.010000000000000115, -0.17999999999999988, 4.163336342344337e-17, 0.1099999999999999, -0.31999999999999973, 0.6500000000000001, -0.9299999999999997, 0.050000000000000044, 0.69, 0.4199999999999997, -0.82, -0.5200000000000004, -0.13, 0.9099999999999998, -0.54, -0.8199999999999996, -0.37999999999999967, -0.7099999999999996, 0.3099999999999999, 0.6999999999999995, 0.4800000000000001, -0.17999999999999994, -0.2699999999999998, 0.31999999999999984, 0.6699999999999998, -0.8800000000000001, 0.11000000000000008, -0.46000000000000013, 0.03999999999999959, -0.5699999999999998, 0.6599999999999997, 0.0799999999999998, 0.47, 0.13, -0.2500000000000002, 0.43000000000000016, 0.18000000000000002, -0.029999999999999583, -0.6100000000000001, 0.53, 0.0800000000000003, -0.24999999999999983, -0.8, -0.5999999999999996, -0.0999999999999999, -0.23000000000000037, 0.6100000000000001, -0.6400000000000005, -0.17000000000000015, -0.07000000000000028, 0.09999999999999998, -0.28000000000000014, 0.020000000000000018, -0.7599999999999998, 0.10999999999999988, -0.10000000000000014, -0.3600000000000004, -0.4100000000000001, -0.4000000000000001, -0.19000000000000014, 0.29000000000000004, -0.8200000000000002, -0.07999999999999974, 0.2299999999999996, -0.3499999999999998, -0.6300000000000001, 0.12000000000000005, 0.8999999999999998, -0.81, 0.3200000000000002, 0.7699999999999996, 0.3699999999999999, 0.21999999999999972, -0.08000000000000003, -0.15999999999999964, -0.6299999999999994, 0.5700000000000002, -0.8200000000000001, -0.4699999999999998, -1.6653345369377348e-16, 0.22999999999999976, -0.11999999999999991, -0.1900000000000002, 0.6900000000000002, -0.11999999999999961, 0.9400000000000004, -0.4999999999999999]]
# [712.5497496072877, [0.8399999999999999, -1.0, 0.029999999999999777, -0.22000000000000028, -0.43, 0.030000000000000044, 0.14000000000000004, -0.33999999999999986, 0.89, 0.2600000000000001, 0.68, -0.19999999999999968, -0.99, 0.010000000000000115, -0.17999999999999988, 4.163336342344337e-17, 0.41999999999999993, -0.5899999999999997, 0.9600000000000002, -0.9299999999999997, 0.050000000000000044, 0.69, 0.19999999999999973, -0.82, -0.5200000000000004, -0.13, 0.9099999999999998, -0.54, -0.8199999999999996, -0.6899999999999997, -0.7099999999999996, 0.3099999999999999, 0.6999999999999995, 0.4800000000000001, -0.17999999999999994, -0.2699999999999998, 0.31999999999999984, 0.6699999999999998, -0.43000000000000016, 0.11000000000000008, -0.46000000000000013, 0.1699999999999996, -0.9899999999999999, 0.6599999999999997, -0.2200000000000002, 0.18999999999999995, 0.13, -0.2500000000000002, 0.43000000000000016, 0.5700000000000001, -0.029999999999999583, -0.6100000000000001, 0.39, 0.5800000000000003, 0.11000000000000015, -0.8, -0.6099999999999997, -0.0999999999999999, -0.23000000000000037, 0.6100000000000001, -0.6400000000000005, -0.17000000000000015, -0.07000000000000028, 0.38, -0.28000000000000014, 0.020000000000000018, -0.7199999999999998, -0.3800000000000001, -0.43000000000000016, -0.3600000000000004, -0.4100000000000001, -0.4000000000000001, 0.16999999999999985, -0.06999999999999995, -0.8200000000000002, -0.07999999999999974, 0.2299999999999996, -0.3499999999999998, -0.6300000000000001, 0.12000000000000005, 0.8999999999999998, -0.81, 0.3200000000000002, 0.7699999999999996, 0.3699999999999999, 0.21999999999999972, -0.08000000000000003, -0.15999999999999964, -0.6299999999999994, 0.5700000000000002, -0.8200000000000001, -0.4699999999999998, -1.6653345369377348e-16, 0.22999999999999976, -0.15999999999999992, -0.1900000000000002, 0.6900000000000002, -0.4399999999999996, 0.9400000000000004, -0.4999999999999999]]
# [704.7566742673522, [0.8399999999999999, -1.0, 0.029999999999999777, -0.28000000000000025, -0.35, 0.030000000000000044, -0.07999999999999996, -0.33999999999999986, 0.89, 0.10000000000000012, 0.68, -0.19999999999999968, -0.99, 0.010000000000000115, -0.3999999999999999, 4.163336342344337e-17, 0.1499999999999999, -0.5299999999999997, 0.8700000000000002, -0.9299999999999997, 0.050000000000000044, 0.69, 0.19999999999999973, -0.31999999999999995, 0.019999999999999685, 0.13999999999999999, 0.5199999999999998, -0.54, -0.22999999999999957, -0.7899999999999996, -0.1699999999999997, 0.3099999999999999, 0.11999999999999952, 0.6000000000000001, -0.17999999999999994, -0.5499999999999998, 0.31999999999999984, 0.6699999999999998, -0.43000000000000016, 0.11000000000000008, -0.46000000000000013, 0.1699999999999996, -0.9899999999999999, 0.6599999999999997, -0.02000000000000024, 0.5399999999999999, 0.42000000000000004, -0.6100000000000002, 0.6200000000000001, 0.18000000000000002, 4.440892098500626e-16, -0.6100000000000001, 0.3500000000000001, 0.4000000000000003, 0.11000000000000015, -0.41000000000000003, -0.029999999999999694, -0.41999999999999993, -0.5000000000000004, 0.7300000000000002, -0.3500000000000005, -0.5700000000000001, -0.9700000000000002, 0.38, -0.5700000000000001, 0.06, -0.8699999999999998, 0.08999999999999986, -0.9100000000000001, -0.4700000000000003, -0.5100000000000001, -0.5900000000000001, 0.16999999999999985, -0.6399999999999999, -0.27000000000000024, 0.24000000000000027, 0.3699999999999996, -0.16999999999999982, -0.24000000000000005, 0.4000000000000001, 0.8999999999999998, -0.81, 0.3200000000000002, 0.7699999999999996, 0.2699999999999999, 0.31999999999999973, -0.08000000000000003, -0.15999999999999964, -0.17999999999999944, 0.11000000000000015, -0.48, -0.7499999999999998, -0.04000000000000026, -0.7000000000000002, -0.15999999999999992, -0.1900000000000002, 0.7000000000000002, -0.4399999999999996, 0.9400000000000004, -0.4999999999999999]]
# [693.5821987552961, [0.8399999999999999, -1.0, 0.029999999999999777, -0.22000000000000028, -0.43, 0.030000000000000044, -0.07999999999999996, -0.33999999999999986, 0.89, 0.2600000000000001, 0.68, -0.19999999999999968, -0.99, 0.010000000000000115, -0.17999999999999988, -0.11999999999999995, 0.2899999999999999, 0.07000000000000028, 0.5400000000000003, -0.9299999999999997, 0.050000000000000044, 0.69, 0.19999999999999973, -0.82, -0.5200000000000004, -0.45999999999999996, 0.5199999999999998, -0.42000000000000004, -0.31999999999999956, -0.37999999999999967, -0.7099999999999996, 0.3099999999999999, 0.20999999999999952, 0.33000000000000007, -0.51, -0.2699999999999998, 0.31999999999999984, 0.6699999999999998, -0.15000000000000013, 0.11000000000000008, -0.46000000000000013, 0.1699999999999996, -0.9899999999999999, 0.6599999999999997, -0.2200000000000002, 0.18999999999999995, 0.13, -0.41000000000000025, 0.43000000000000016, 0.5700000000000001, -0.029999999999999583, -0.6100000000000001, 0.39, 0.5800000000000003, 0.11000000000000015, -0.8, -0.6099999999999997, -0.0999999999999999, -0.23000000000000037, 0.6100000000000001, -0.9900000000000004, -0.17000000000000015, 0.02999999999999972, 0.38, -0.28000000000000014, 0.020000000000000018, -0.7199999999999998, -0.3800000000000001, -0.43000000000000016, -0.3600000000000004, -0.4100000000000001, -0.4000000000000001, 0.16999999999999985, -0.06999999999999995, -0.8200000000000002, -0.07999999999999974, 0.2299999999999996, -0.3499999999999998, -0.1800000000000001, 0.12000000000000005, 0.8999999999999998, -0.81, 0.3200000000000002, 0.7699999999999996, 0.3699999999999999, 0.21999999999999972, 0.02999999999999997, -0.15999999999999964, -0.6299999999999994, 0.5700000000000002, -0.8200000000000001, -0.4699999999999998, -1.6653345369377348e-16, 0.22999999999999976, -0.15999999999999992, -0.1900000000000002, 0.6900000000000002, -0.4399999999999996, 0.9400000000000004, -0.4999999999999999]]
# [678.9278027844225, [0.8399999999999999, -1.0, 0.029999999999999777, -0.28000000000000025, -0.43, 0.030000000000000044, -0.07999999999999996, -0.33999999999999986, 0.89, 0.2600000000000001, 0.68, -0.19999999999999968, -0.99, 0.010000000000000115, -0.13999999999999987, 4.163336342344337e-17, 0.1499999999999999, -0.5299999999999997, 0.8700000000000002, -0.9299999999999997, 0.050000000000000044, 0.69, 0.19999999999999973, -0.31999999999999995, 0.019999999999999685, 0.13999999999999999, 0.5199999999999998, -0.54, -0.22999999999999957, -0.7899999999999996, -0.1699999999999997, 0.3099999999999999, 0.11999999999999952, 0.6000000000000001, -0.17999999999999994, -0.2699999999999998, 0.31999999999999984, 0.6699999999999998, -0.43000000000000016, 0.11000000000000008, -0.46000000000000013, 0.1699999999999996, -0.9899999999999999, 0.6599999999999997, -0.6000000000000002, 0.42999999999999994, 0.42000000000000004, -0.6100000000000002, 0.6200000000000001, 0.18000000000000002, 4.440892098500626e-16, -0.6100000000000001, 0.3500000000000001, 0.4000000000000003, 0.11000000000000015, -0.41000000000000003, -0.029999999999999694, -0.5099999999999999, -0.10000000000000037, 0.7300000000000002, -0.6400000000000005, -0.5700000000000001, -0.9700000000000002, 0.38, -0.5700000000000001, 0.06, -0.8699999999999998, 0.08999999999999986, -0.9100000000000001, -0.4700000000000003, -0.5100000000000001, -0.5900000000000001, 0.16999999999999985, -0.22999999999999995, -0.27000000000000024, 0.24000000000000027, 0.3699999999999996, -0.16999999999999982, -0.24000000000000005, 0.4000000000000001, 0.8999999999999998, -0.81, 0.3200000000000002, 0.7699999999999996, 0.2699999999999999, 0.31999999999999973, -0.08000000000000003, -0.15999999999999964, -0.17999999999999944, 0.11000000000000015, -0.48, -0.7499999999999998, -0.04000000000000026, -0.4800000000000002, -0.15999999999999992, -0.1900000000000002, 0.7000000000000002, -0.4399999999999996, 0.9400000000000004, -0.4999999999999999]]